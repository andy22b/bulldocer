m5source.txt   95/5/19

COMPILING MT5 PROGRAMS WITH THE SOURCE CODE KIT
by Peter Zwick
           

1. Introduction
MT5 is a program for obtaining moment tensor and double-couple solutions 
for earthquakes from inversion of teleseismic waveforms. It is fully 
described in Chapter _ of IASPEI Volume _ which you should already have 
if you have the MT5 source code kit (including this file). 

Compiling MT5 programs is very simple given that you have a PC with 
sufficient free memory (540 Kb) and the Microsoft QuickBasic compiler 
version 4.5 (or 4.0). After setting the PATH variable and editing the 
paths in the MKMT.BAT batch file as described below, just enter the 
command MKMT. Do not attempt to edit or compile the programs using the 
QuickBasic interactive editor/compiler (QB.EXE). The remainder of this 
article gives the details of compilation requirements and procedures. 

2. Hardware Requirements
The hardware requirements for compiling MT5 are the same as those given 
in in Chapter _ of IASPEI Volume _ for running MT5 with the exceptions 
of memory size, monitor type and printer. 

Compiling MT5 takes more memory than running it, and a minimum of about 
540 Kb free RAM (random access memory) is suggested. To determine the 
amount of free RAM, give the command chkdsk at the DOS prompt. A 
graphics display monitor and printer are not required for compiling 
although they will be necessary to test the programs. 

3. Software Requirements 
We have successfully created all of the MT5 programs using Microsoft 
Quickbasic Versions 4.5. Alpha versions of the programs were also 
compiled using Microsoft Quickbasic Versions 4.0. The only significant 
difference between the two was that MT5 created with version 4.0 was 
unable to properly handle the display screen (monochrome VGA) of a 
Zenith laptop computer, whereas MT5 created with version 4.5 had no 
problems with the display. Although MT5 programs can probably be created 
with QuickBasic version 4.0 as well as with version 4.5, do not attempt 
to mix QuickBasic versions in one compile/link session. Only have one 
version available in your DOS path at one time. Previous versions of 
QuickBasic do not support some of the functions that we have used and 
should not be used. 

Because we use DOS command line compiling and linking for MT5 and its 
utilities (see sections 6 and 7 for instructions), only the following 
QuickBasic files from version 4.5 (or 4.0) are required: 

  - BC.EXE - compiler
  - LINK.EXE - linker
  - BRUN45.EXE (or BRUN40.EXE) - run-time libraries
  - BRUN45.LIB (or BRUN40.LIB) - link libraries
  - QB.LIB - link library
  - QB.QLB - link quicklibrary

You also need:

  - A word processor that can edit and create ASCII text files
  - MT5 source code files on the disk supplied with this manual.

4. Software Installation

4.1 Installing Microsoft QuickBasic Version 4.0 or 4.5
   
Install QuickBasic V4.0 or 4.5 as directed in the QuickBasic 
documentation. 

4.2 Installing MT5

You can install the programs and support files for MT5 as directed in 
Chapter _ of IASPEI Volume _. In brief, this involves creating a 
directory on the hard disk for the files, and copying all the files from 
the MT5 distribution diskette into that directory. For example, assuming 
that the distribution diskette is in drive A: and you want to put the 
programs into directory \MT5 of hard drive C: 

   mkdir c:\mt5 
   copy a:*.* c:\mt5 
                            
Create a separate subdirectory for the files on the MT5 source code 
diskette and copy all the files from the source code diskette into that 
directory. For example,  assuming that the source code diskette is in 
drive A: and you want to put the code into directory \MT5\SRC of hard 
drive C: 

   mkdir c:\mt5\src 
   copy a:*.* c:\mt5\src 

4.3 Modifying AUTOEXEC.BAT

To ensure that the DOS PATH contains the directory with the QuickBasic 
executable (.EXE) files, enter the command path at the DOS prompt, e.g., 

   path

If the list of pathnames printed by DOS does not include the directory 
in which BC.EXE and the other QuickBasic executable files are found, you 
will need to either move the files to a directory in the PATH or add the 
directory to the PATH command in the C:\AUTOEXEC.BAT file. 

A backup copy of C:\AUTOEXEC.BAT should be made before editing the file. 
To edit C:\AUTOEXEC.BAT file, use an ASCII-type word processor - DO NOT 
USE AN EDITOR THAT INSERTS FORMATTING INFORMATION (unless you know how 
to instruct the editor to save a file as ASCII text only). If you are in 
doubt about about this procedure, get some assistance from someone 
familiar with editing system files. An improper C:\AUTOEXEC.BAT file can 
prevent your computer from starting properly. If you want to proceed 
with editing the file, look for a line beginning with the command PATH 
(case is insignificant). If this appears more than once, you will need 
to follow the chain of DOS BATCH commands (see your DOS User's Manual) 
to find the appropriate PATH command to modify. Add the path to the 
QuickBasic compiler files to this line by appending a semi-colon and the 
pathname. For example, suppose that the program QB.EXE is in path 
C:\QB4. A PATH command reading 

   PATH C:\;C:\DOS;C:\MYDIR

should be changed to read

   PATH C:\;C:\DOS;C:\MYDIR;c:\qb4

In addition to the path to the QuickBasic compiler files, you may want 
to also include the path to the MT5 program files as well. In our 
example, that would make the new PATH line 

   PATH C:\;C:\DOS;C:\MYDIR;c:\qb4;c:\mt5

If you do not have a Hercules monitor, skip the rest of this paragraph 
about installing MSHERC. If you do have a Hercules monitor, you will not 
be able to run MT5 until you have run the program MSHERC supplied on the 
MT5 distribution diskette. A command to run this program can be given in 
the C:\AUTOEXEC.BAT file by including the line 

   c:\mt5\msherc

or by giving the same command at the DOS prompt prior to running MT5 
programs. 

Save the new C:\AUTOEXEC.BAT file and reboot the computer to make the 
changes take effect. 

5. Source Files for the MT5 Program and MT5 Utilities

This section lists the various source code files used to build MT5 and 
its utility programs. 

5.1 Main Program Modules for MT5
  MT5.BAS
  MT5MAIN.BAS
  MT5MEN1.BAS
  MT5MEN2.BAS
  MT5IT.BAS
  MT5PLOT.BAS

5.2 Main Program Modules for Utility Programs
  MT5DIG.BAS
  MT5INT.BAS
  MT5GDSN.BAS
  MT5LIST.BAS
  MT5PREV.BAS

5.3 Subroutine Modules (linked with the main modules)
  M5SUB.BAS
  M5SUB1.BAS
  M5SUB3.BAS
  M5SUB7.BAS

5.4 Include Files

The following files are automatically included as required when 
compiling: 
  M5AUXPL.BAS
  M5COMFUN.BAS
  M5COMMON.BAS
  M5COMSCR.BAS
  M5DELAZ.BAS
  M5EIGEN.BAS
  M5FFT.BAS
  M5FNDECL.BAS
  M5FUNCTN.BAS
  M5GJINV.BAS
  M5GRSUBS.BAS
  M5IRESP.BAS
  M5MTSUB.BAS
  M5PTBAX.BAS
  M5RADPAT.BAS
  M5RAPARS.BAS
  M5RDPARM.BAS
  M5RDSET.BAS
  M5STF.BAS
  M5SYNIO.BAS
  M5TTIMES.BAS
  M5WIGINT.BAS
  M5WPARM.BAS
  QB.BI

6. Automatic Compiling and Linking with MKMT.BAT batch file

The MKMT.BAT file supplied with your source code is designed to allow 
compilation of all or selected MT5 main and utility programs (if you 
have what is known as a "MAKE" program, you could make a more elegant 
version of what I will describe here). 

The syntax for running the batch file is:

  MKMT (para1 (para2))
        where: () means optional (no entry means ALL)
               para1 is starting module # (0-11,A=MT5 utilities only)
               para2 is ending module # (0-11, no entry means ALL REST)

The order of compilation in MKMT.BAT is:

Module
  #     Module Name

    (main programs that are called from within MT5)
  0     M5SUB
  1     MT5MEN1
  2     MT5MEN2
  3     MT5IT
  4     MT5PLOT
  5     MT5MAIN
  6     MT5
    (MT5 Auxiliary Programs that run independently)
  7     MT5INT
  8     MT5GDSN
  9     MT5LIST
 10     MT5DIG
 11     MT5PREV


6.1 Modifying MKMT.BAT to your QuickBasic library path

All the source code and object files operated on by MKMT.BAT are 
expected to be in the default directory. The Microsoft QuickBasic 
compiler (BC.EXE), and linker (LINK.EXE) need to be available in the DOS 
path. The batch file is configured for the libraries BRUN4x.LIB, QB.QLB 
and QB.LIB to be in path C:\BASIC\QB4. You will need to edit MKMT.BAT to 
change all instances of "c:\basic\qb4" to the correct path to your 
QuickBasic library files. 

6.2 What MKMT.BAT does

MKMT.BAT is a poor man's version of a MAKE utility that does not check 
file dates. Instead, it relies on the user to tell it which modules to 
compile and link. For each file in the list that is to be built, an 
object file will be created if it does not exist in the default 
directory. Then the object file will be linked to create an executable 
file. At the conclusion of the compilation and linking, the object file 
is deleted with one exception. The files M5SUB.OBJ, M5SUB1.OBJ, 
M5SUB3.OBJ and M5SUB7.OBJ are not deleted, but are retained and reused 
for linking with all the modules. If you wish to recompile any of these 
subroutine modules, just delete the object file (e.g., del m5sub.obj - 
do NOT delete M5SUB.BAS), to force recompilation before linking with the 
main modules. 

At the completion of creating all of the MT5 main program modules, the 
batch file will pause with this message: 

 Successful compilation of MT5 main programs!
 Hit Ctrl-Brk to ABORT compilation of auxiliary programs, or..
 Press any key to continue . . .

Only if you wish to stop at this point, hold the Ctrl key down and press 
the Break key. Then press "y" at the prompt: 

 Terminate batch job (Y/N)?

Otherwise just press a key, and compilation will continue.


6.3 Errors during Automatic Compiling or Linking

If either the compile or link operations has a error (usually due to an 
error in the source code), the MKMT batch file will terminate and give 
you an error message indicating which module aborted and what the syntax 
of the MKMT command is so that you can restart it at that point in the 
list of modules. 

You may need to manually compile a source code module to evaluate the 
source of an error. See section 7.3 (Errors During Compiling and 
Linking) for an explanation of this and section 7.1 (Manual Compiling) 
for instructions on compiling a module manually (with an explicit DOS 
command). 

If you give an improper DOS command line argument to MKMT, it will not 
compile or link beyond creation of M5SUB.OBJ from M5SUB.BAS. Instead you 
will be given a message indicating the proper syntax for MKMT. 

6.4 EXAMPLES:

To compile all main and utility programs run this batch file with the 
command: 

  MKMT
    or
  MKMT 1 11

To compile a single program in the group, use this command:

  MKMT n n
  (where n is the number of the program from the list above)

To compile all the programs from MT5PLOT - on, use:

  MKMT 4
    or
  MKMT 4 11

TO compile just the Auxiliary (Utility programs) enter:

  MKMT A
    or
  MKMT a
    or
  MKMT 7

7. Manual Compiling and Linking

Because of the size of the source code for the MT5 programs and specific 
linking requirements to optimize memory usage, the QuickBasic 
programming environment (available by running the program QB.EXE) can 
NOT be used to edit source files or create MT5 executable programs. 
Instead, the MT5 program modules must be compiled and linked from the 
DOS command line using either the commands detailed in this section 7 
(or in section 6 for automatic file creation). All of the MT5 programs 
created by the methods presented here will require the run-time library, 
BRUN45.EXE (or BRUN40.EXE for version 4.0 of QuickBasic), to run. 

It is important to note that although QuickBasic has a method for 
creating standalone executable files that do not require the run-time 
library, these standalone executable files are unable to pass global 
variables to each other. Because of this, the MT5 program requires the 
use of the run-time library. The utility programs do not need to pass 
global variables, but there is no need to create them as standalone 
executables as long as the BRUN4x.EXE file is accessible on your drive 
to run MT5. 

The following two sub-sections describe the manual compiling and linking 
process. Section 6 describes compiling and linking automatically using a 
batch file provided with the source code. 

7.1 Manual Compiling

Automatic compiling and linking with the batch file MKMT.BAT (described 
in Section 6) is recommended over the methods described in this section 
because it is much simpler. MKMT.BAT performs the functional equivalent 
of the procedures described in this section. Try it first! 

Compiling is the creation of an object file (.OBJ extension) from a 
source code file (.BAS extension). Only the main program modules and the 
M5SUB module are compiled. Include files are source code that are 
treated as if they are inserted directly ("included") into the source 
code of the module that specifies them. For example, the statement that 
does this in a source code module looks like this: 

rem $INCLUDE: 'M5FUNCTN'

As such you don't have to do anything with the include files to create 
an executable file other than making sure that they are available in the 
default path. If you alter any of the include files, remember that they 
are used in more than one MT5 main module and your changes can affect 
all of the MT5 modules that are rebuilt. 

All main program modules for the MT5 program and subroutine modules are 
compiled with the command: 

 bc <module name>,,nul /s /ah

and main program modules for mt5 utility programs are compiled with the 
command: 

 bc <module name>,,nul /s

  where: "nul" indicates "don't generate program listing file"
         "/s" means "hold string data table in object file" (used 
              because the compilation uses less memory this way)
    and  "/ah indicates that array sizes may exceed 64 kilobytes

7.2 Manual Linking

Linking is the creation of an executable file from the object files by 
combining ("linking") them with code from the QuickBasic library. 

Because all of the programs use code from the M5SUB.BAS module, it is 
linked with them at the time that the executable file is made. It is not 
an "include" file because of memory constraints during the compile 
process. The proper command line form of the link statement is: 

link /e <modulename>+m5sub,,nul,<QBpath>\qb+<QBpath>\

where: "/e" tells the linker to "compress executable" to smaller size 
       <modulename> is the name of program (e.g., MT5PLOT)
       "nul" indicates "don't generate map file"
       <QBpath> is the path to your QuickBasic library (e.g., C:\QB)

Exceptions to the above link command are used for creating MT5MEN1, 
MT5MEN2, MT5IT, MT5PLOT,MT5PLOT, MT5INT. These programs link with 
additional modules in order to keep the module size small enough to 
compile in a PC with about 520 Kb of free memory before compiling. The 
link commands for these programs are: 

link /e mt5men1+m5sub+m5eigen,,nul,<QBpath>\qb+<QBpath>\
link /e mt5men2+m5sub+m5eigen,,nul,<QBpath>\qb+<QBpath>\
link /e mt5it+m5sub+m5eigen+m5sub3,,nul,<QBpath>\qb+<QBpath>\
link /e mt5plot+m5sub+m5mtsub,,nul,<QBpath>\qb+<QBpath>\
link /e mt5main+m5sub+m5sub1,,nul,<QBpath>\qb+<QBpath>\
link /e mt5int+m5sub+m5sub71,,nul,<QBpath>\qb+<QBpath>\

The first use of <QBpath> in this statement is to link with the 
alternate quicklibrary QB.QLB which has assembly code interface 
functions. The second use of <QBpath> points the way to the standard 
QuickBasic libraries (QB.LIB, and BRUN45.LIB or BRUN40.LIB for 
QuickBasic Versions 4.5 or 4.0, respectively). 

7.3 Errors During Compiling or Linking

The most common errors occur during compilation. The compiler will give 
you an error message indicating the nature of the error and its memory 
location. The error codes and messages are fully described in the 
QuickBasic Users Manual. To identify the location of the error in your 
source file, you will need to compile the module with the <module name> 
replacing the word 'nul' in the BC command. This makes the compiler 
generate a source listing in a file named <module name>.LST. This 
listing has a value for offset at the beginning of each statement line. 
These values correlate with the second half of the error location (after 
the ":") given in the compiler error message. 

Memory problems are more likely to occur during compiling than during 
linking or running MT5. Using the compiling commands as shown in this 
section 7.1 or running the MKMT batch file (section 6), MT5 compiles 
successfully on a PC with about 520 Kb of free memory. 

Errors may also occur during linking or even at run-time, from changes 
that you have made to the source code. The same process can be used to 
identify the location in the source code that the error occurred. The 
problem may also be obvious from the error message (e.g., "file not 
found..."). 

8. Making a new MT5 available
If you wish to replace the original MT5 programs with your newly 
compiled versions, copy the new .EXE files to the directory containing 
the original .EXE files. Otherwise, you will need to change the path in 
the file \MT5.SET (in the root directory) to point to the directory 
containing the new files. If you do not do this, MT5 will chain to the 
older versions of its main modules as it runs (even if you explicitly 
start the program by giving the full path name as part of the program 
name). Note that all the MT5 main modules must be in the same directory 
and that the first line of \MT5.SET points to that directory. You can 
either hand-edit the first line of the \MT5.SET file, or just erase the 
file and allow MT5 to build a new one (it will start up in the 
CONFIGURATION MENU and you will enter paths, screen type, etc). 

